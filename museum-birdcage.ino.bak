#define RESET_TIME 180000 // 3 minutes

bool SOLVED = false;
bool SOLVED_TRAY_IN = false;
unsigned long solved_at = 0;
bool TRAY_OUT = false;
bool ENABLED = true;

void reset() {
  solved_at = 0;
  SOLVED = false;
  SOLVED_TRAY_IN = false;
  TRAY_OUT = false;
  ENABLED = true;
}

void loop() {

  if (SOLVED) {
    if (!TRAY_OUT) {
      playTrack(TRACK_WINNING, false);
      digitalWrite(MOTOR_ENABLE_PIN, LOW);
      stepper.rotate(MOTOR_TRAVEL);
      digitalWrite(MOTOR_ENABLE_PIN, HIGH);
      TRAY_OUT = true;
    } else if (!SOLVED_TRAY_IN && millis() - solved_at > RESET_TIME) {
      Serial.printf("Resetting tray...\n");
      digitalWrite(MOTOR_ENABLE_PIN, LOW);
      stepper.rotate(-MOTOR_TRAVEL);
      digitalWrite(MOTOR_ENABLE_PIN, HIGH);
      ENABLED = false;
      SOLVED_TRAY_IN = true;
    }

    // NOOP the rest if we've solved it
    return;
  }

  if (!PLAYING_SONG) {
    if (last_button_press == 0 || millis() - last_button_press > BUTTON_TIME_BETWEEN_SONG) {
      Serial.printf("playing song...\n");
      PLAYING_SONG = true;
      playing_song_at = millis();
      playTrack(TRACK_FULL, true);
    }
  } else {

    // if totally timed out, restart it
    if (millis() - playing_song_at > 25000) {
      Serial.printf("done with song, starting again...\n");    
      PLAYING_SONG = false;
      playing_song_at = 0;
    }

    // if there was a button press between our start time, then restart it
    if (last_button_press > 0 && millis() - last_button_press > BUTTON_TIME_BETWEEN_SONG && last_button_press - playing_song_at < 25000) {
      Serial.printf("restarting song from button press...\n");    
      PLAYING_SONG = false;
      playing_song_at = 0;
    }
  }
}
